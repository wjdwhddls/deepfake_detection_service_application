import React, { useEffect, useState, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Alert,
  Platform,
  Image,
  NativeModules,
  BackHandler,
} from 'react-native';
import { useNavigation, useFocusEffect } from '@react-navigation/native';
import { pick } from '@react-native-documents/picker';
import { request, PERMISSIONS, RESULTS } from 'react-native-permissions';
import { useTheme } from '../contexts/ThemeContext';
import LogoImage from '../assets/Detection.png';
import RNFS from 'react-native-fs'; // ‚úÖ ÏÉàÎ°ú Ï∂îÍ∞Ä: Ï∫êÏãúÎ°ú Î≥µÏÇ¨Ìï¥ Îß§Î≤à ÏÉàÎ°úÏö¥ Í≤ΩÎ°ú ÏÇ¨Ïö©

const HomeScreen = () => {
  const [resultData, setResultData] = useState(null);
  const [showUploadButton, setShowUploadButton] = useState(false);
  const [loading, setLoading] = useState(false);
  const { isLightMode } = useTheme();
  const navigation = useNavigation();

  // ÎÑ§Ïù¥Ìã∞Î∏å Î™®Îìà
  const { DeepfakeDetector } = NativeModules;

  // ‚úÖ Î™®Îç∏ Ï¥àÍ∏∞Ìôî: 1ÌöåÎßå, Ï§ëÎ≥µ Î∞©ÏßÄ
  const initOnceRef = useRef(false);
  useEffect(() => {
    let mounted = true;

    const boot = async () => {
      if (initOnceRef.current) return; // Ïù¥ÎØ∏ Ï¥àÍ∏∞ÌôîÌñàÏúºÎ©¥ Ïä§ÌÇµ
      if (!DeepfakeDetector?.initModel) {
        console.warn('DeepfakeDetector native module not found.');
        return;
      }
      try {
        await DeepfakeDetector.initModel();
        if (mounted) initOnceRef.current = true;
      } catch (e) {
        console.warn('initModel failed:', e);
        Alert.alert('Ïò§Î•ò', 'Î™®Îç∏ Ï¥àÍ∏∞ÌôîÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    };

    boot();
    return () => { mounted = false; };
  }, []); // üëà ÏùòÏ°¥ÏÑ± Ï†úÍ±∞(Ïû¨Ï¥àÍ∏∞Ìôî Î∞©ÏßÄ)

  // ‚úÖ ÌôîÎ©¥ Ìè¨Ïª§Ïä§Îê† ÎïåÎßàÎã§ ÏÉÅÌÉú/ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî
  useFocusEffect(
    React.useCallback(() => {
      // UI ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setResultData(null);
      setLoading(false);
      setShowUploadButton(false);

      // ÎÑ§Ïù¥Ìã∞Î∏å ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî(ÏûàÏúºÎ©¥)
      try {
        if (DeepfakeDetector?.resetSession) {
          DeepfakeDetector.resetSession();
        } else if (DeepfakeDetector?.clear) {
          DeepfakeDetector.clear();
        }
      } catch (e) {
        console.log('reset session skipped:', e);
      }

      const onBack = () => {
        // Îí§Î°úÍ∞ÄÍ∏∞ Ïãú ÏßÑÌñâÏ§ë ÏÉÅÌÉú Ï†ïÎ¶¨
        setLoading(false);
        setResultData(null);
        return false; // Í∏∞Î≥∏ Îí§Î°úÍ∞ÄÍ∏∞ ÎèôÏûë Ïú†ÏßÄ
      };

      // üîÅ RN 0.7x: addEventListenerÍ∞Ä subscriptionÏùÑ Î∞òÌôò ‚Üí cleanupÏóêÏÑú remove() Ìò∏Ï∂ú
      const backSub = BackHandler.addEventListener('hardwareBackPress', onBack);

      return () => {
        backSub?.remove();
      };
    }, [])
  );

  const handleDetect = () => {
    setShowUploadButton(!showUploadButton);
  };

  const requestFilePermissionIfNeeded = async () => {
    if (Platform.OS !== 'android') return true;
    if (Platform.Version >= 33) {
      const result = await request(PERMISSIONS.ANDROID.READ_MEDIA_AUDIO);
      return result === RESULTS.GRANTED;
    } else {
      const result = await request(PERMISSIONS.ANDROID.READ_EXTERNAL_STORAGE);
      return result === RESULTS.GRANTED;
    }
  };

  const handleUpload = async () => {
    try {
      setLoading(true);
      setResultData(null);

      const permissionGranted = await requestFilePermissionIfNeeded();
      if (!permissionGranted) {
        Alert.alert('Í∂åÌïú Î∂ÄÏ°±', 'ÌååÏùº Ï†ëÍ∑º Í∂åÌïúÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        return;
      }

      const [pickResult] = await pick({ mode: 'import' });
      if (!pickResult) return;

      if (!DeepfakeDetector || !DeepfakeDetector.detectFromFile) {
        Alert.alert('Ïò§Î•ò', 'Ïò®ÎîîÎ∞îÏù¥Ïä§ Î™®ÎìàÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.');
        return;
      }

      // ÌòÑÏû¨ ÎÑ§Ïù¥Ìã∞Î∏å Íµ¨ÌòÑÏùÄ 16kHz mono WAV Í∏∞Ï§Ä. Îã§Î•∏ Ìè¨Îß∑ÏùÄ ÏïàÎÇ¥.
      const isWav =
        (pickResult?.mimeType || '').toLowerCase().includes('wav') ||
        (pickResult?.name || '').toLowerCase().endsWith('.wav');
      if (!isWav) {
        Alert.alert('ÌòïÏãù ÏïàÎÇ¥', 'ÌòÑÏû¨Îäî WAV ÌååÏùºÎßå ÏßÄÏõêÌï©ÎãàÎã§. (16kHz/mono Í∂åÏû•)');
        return;
      }

      // ‚úÖ Í∞ôÏùÄ URI Ï∫êÏãú Ïò§ÌåêÏ†ï Î∞©ÏßÄ: Îß§Î≤à ÏÉàÎ°úÏö¥ Ï∫êÏãú Í≤ΩÎ°úÎ°ú Î≥µÏÇ¨ ÌõÑ Ï†ÑÎã¨
      const ext = (pickResult?.name || '').toLowerCase().endsWith('.wav') ? '.wav' : '.wav';
      const cachedPath = `${RNFS.CachesDirectoryPath}/upload-${Date.now()}${ext}`;
      await RNFS.copyFile(pickResult.uri, cachedPath);

      // üîç Ïò®ÎîîÎ∞îÏù¥Ïä§ Ï∂îÎ°†(ÌååÏùº Ïä§ÌÇ¥ Ìè¨Ìï®)
      const fileUri = Platform.OS === 'android' ? `file://${cachedPath}` : cachedPath;
      const res = await DeepfakeDetector.detectFromFile(fileUri);
      // res: { prob_real: number, result: 'ÏßÑÏßú ÏùåÏÑ±' | 'Í∞ÄÏßú ÏùåÏÑ±' }
      setResultData(res);
    } catch (error) {
      console.error('Ïò®ÎîîÎ∞îÏù¥Ïä§ Î∂ÑÏÑù Ïò§Î•ò:', error);
      Alert.alert('Ïò§Î•ò', 'Î∂ÑÏÑù Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setLoading(false);
      // ÏóÖÎ°úÎìú Î≤ÑÌäºÏùÄ Í≥ÑÏÜç Î≥¥Ïù¥Í≤å Ïú†ÏßÄ ‚Üí Î∞îÎ°ú Îã§Ïùå ÏóÖÎ°úÎìú Í∞ÄÎä•
      setShowUploadButton(true);
    }
  };

  const handleReset = () => {
    setResultData(null);
    setLoading(false);
    setShowUploadButton(true); // Í≤∞Í≥º Îã´Í≥† Í≥ßÎ∞îÎ°ú ÏÉà ÏóÖÎ°úÎìú Ïú†ÎèÑ
    try { DeepfakeDetector?.resetSession?.(); } catch {}
  };

  const handleDetailView = () => {
    navigation.navigate('DetectDetail', { result: resultData });
  };

  const styles = getDynamicStyles(isLightMode);

  return (
    <View style={styles.container}>
      <Image
        source={LogoImage}
        style={{ width: 320, height: 320 }}
        resizeMode="contain"
      />

      <TouchableOpacity style={styles.detectButton} onPress={handleDetect}>
        <Text style={styles.detectButtonText}>DETECT</Text>
      </TouchableOpacity>

      {showUploadButton && (
        <TouchableOpacity style={styles.uploadButton} onPress={handleUpload} disabled={loading}>
          <Text style={styles.uploadButtonText}>
            {loading ? 'ÏóÖÎ°úÎìú Ï§ë...' : 'UPLOAD FILE'}
          </Text>
        </TouchableOpacity>
      )}

      {resultData && (
        <View style={styles.resultContainer}>
          <Text style={styles.resultTitle}>üìù ÏòàÏ∏° Í≤∞Í≥º</Text>
          <Text style={styles.resultText}>
            <Text style={styles.resultLabel}>Í≤∞Í≥º: </Text>
            {resultData.result}
          </Text>
          {typeof resultData.prob_real === 'number' && (
            <Text style={styles.resultText}>
              <Text style={styles.resultLabel}>Real ÌôïÎ•†: </Text>
              {(resultData.prob_real * 100).toFixed(2)}%
            </Text>
          )}

          <View style={styles.buttonRow}>
            <TouchableOpacity style={styles.detailButton} onPress={handleDetailView}>
              <Text style={styles.detailButtonText}>ÏÉÅÏÑ∏Î≥¥Í∏∞</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.confirmButton} onPress={handleReset}>
              <Text style={styles.confirmButtonText}>ÌôïÏù∏</Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </View>
  );
};

const getDynamicStyles = (isLightMode) =>
  StyleSheet.create({
    container: {
      flex: 1,
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: isLightMode ? '#F8F8F8' : '#121212',
    },
    detectButton: {
      backgroundColor: isLightMode ? '#FFFFFF' : '#1E1E1E',
      paddingVertical: 15,
      paddingHorizontal: 40,
      borderRadius: 5,
      marginBottom: 20,
      borderWidth: isLightMode ? 1 : 0,
      borderColor: '#E0E0E0',
      shadowColor: '#000',
      shadowOpacity: 0.1,
      shadowRadius: 5,
      elevation: 3,
    },
    detectButtonText: {
      fontSize: 20,
      fontWeight: 'bold',
      color: isLightMode ? '#000000' : '#FFFFFF',
    },
    uploadButton: {
      backgroundColor: isLightMode ? '#2196F3' : '#37474F',
      paddingVertical: 12,
      paddingHorizontal: 20,
      borderRadius: 5,
      marginTop: 10,
    },
    uploadButtonText: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#FFFFFF',
    },
    resultContainer: {
      marginTop: 30,
      backgroundColor: isLightMode ? '#FAFAFA' : '#1E1E1E',
      borderRadius: 8,
      padding: 15,
      width: '90%',
      shadowColor: '#000',
      shadowOpacity: 0.1,
      shadowRadius: 10,
      elevation: 3,
    },
    resultTitle: {
      fontSize: 20,
      fontWeight: 'bold',
      marginBottom: 10,
      color: isLightMode ? '#37474F' : '#E0E0E0',
    },
    resultText: {
      fontSize: 16,
      marginBottom: 5,
      color: isLightMode ? '#424242' : '#E0E0E0',
    },
    resultLabel: {
      fontWeight: 'bold',
      color: isLightMode ? '#212121' : '#FFFFFF',
    },
    buttonRow: {
      flexDirection: 'row',
      justifyContent: 'space-between',
      marginTop: 20,
    },
    detailButton: {
      backgroundColor: '#2196F3',
      paddingVertical: 10,
      paddingHorizontal: 30,
      borderRadius: 5,
      marginRight: 10,
    },
    detailButtonText: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#FFFFFF',
    },
    confirmButton: {
      backgroundColor: '#FF5252',
      paddingVertical: 10,
      paddingHorizontal: 30,
      borderRadius: 5,
    },
    confirmButtonText: {
      fontSize: 16,
      fontWeight: 'bold',
      color: '#FFFFFF',
    },
  });

export default HomeScreen;